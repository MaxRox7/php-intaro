Задание А

Первое число - количество ставок. Следовательно, первое число задает количество строк, в которые должны попасть данные из этих строк
В ставках первым числом указана игра, на которую сделана ставка, далее сумма ставки, и на какой исход он поставил.
Пусть первое число - задает число строк в двумерном массиве, где и будет хранить строки. Это число должно сказать коду, сколько чисел
до числа m не должно браться в расчет.

В отдельную переменную делаем 0, чтобы посчитать деньги, выигранные или проигранные со ставок

После всех этих строк идет число, описывающее количество игр. В каждой их этих строк первым числом указана игра, 
на которую была сделана ставка. Далее указаны коэффициенты на определенные исходы игры, и сам исход игры.

Потом число m также создает двумерный массив с количеством строк m. И также записывает все данные.
Оно должно анализировать, где первые числа совпадают в двух массивах. Потом анализировать, совпадают ли буквы. Если буквы совпадают,
то выдавать число, которое находится в нужной нам строке, помноженное на коэффициент, и из которого вычитаем изначальную сумму ставки
и прибавлять эту сумму к переменной, в которой мы фиксируем все махинации со ставками. 
Если не совпадают, то вычитать об общей суммы ставку, которая находится в первом массиве в строке, где совпали идентификаторы игр.


Задание C

В <> скобках нам подаются данные, валидацию на примере которых мы должны проверить. Первый символ после записи в скобках - это тип
валидации. Для типа валидации P, D и E все вполне конкретно: P- это Номер телефона, он должен быть по маске +7 (999) 999-99-99;
D -  Дата и время, дожен быть по формату d.m.Y H:i; E - электронная почта  Имя от 4 до 30 символов, можно использовать заглавные 
и строчные латинские буквы, цифры и нижнее подчеркивание. Адрес не может начинаться с нижнего подчеркивания. Дальше следует символ @, 
за ним домен - от 2 до 30 заглавных или строчных латинских букв, точка и домен верхнего уровня - от 2 до 10 строчных латинских букв.

В случаях с валидациями строк и чисел чуть сложнее: если тип валидации S, строка, то сразу после него идут два числа. Они описывают 
возможную длинну числа. Если валидация N, то сразу после типа валидации также идет два числа. Они же обозначают в каких пределах может
находиться заданное число.

Это собственно все. На выходе программа должна вывести "OK", если валидации не на что жаловаться, FAIL - если какое либо из условий
валидации было нарушено


Задание D

Для решения этой задачи можно воспользоваться алгоритмом поиска кратчайшего пути в графе, например, алгоритмом Дейкстры.

Вначале следует построить граф, где узлы будут представлять собой узлы сети, а ребра будут представлять собой соединения между 
этими узлами, а их вес будет равен времени передачи сигнала.

После построения графа можно обрабатывать запросы следующим образом:

Если запрос является запросом на получение времени передачи сигнала между указанными узлами, применяем алгоритм поиска 
кратчайшего пути для нахождения времени передачи сигнала между этими узлами.
Если запрос является запросом на удаление соединения между узлами, удаляем соответствующее ребро из графа.
Если запрос является изменением времени передачи сигнала между узлами, обновляем вес соответствующего ребра в графе.
После обработки каждого запроса "?" выводим результат - время передачи сигнала между указанными узлами на тот момент. 
Если пакет не сможет дойти от одного узла до другого, выводим -1.


